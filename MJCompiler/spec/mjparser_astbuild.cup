package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal Integer NUMBER;
terminal Character CHAR;
terminal String BOOL;
terminal String IDENT;
terminal IF, ELSE;
terminal PROGRAM, BREAK, CLASS, ENUM, CONST, DO, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOREACH;
terminal PLUS, MINUS, MUL, DIV, REM, EQUAL, NOTEQUAL, GREAT, GREATEQUAL, LESS, LESSEQUAL, AND, OR, EQUALS, INC, DEC, SEMI, TWOTACKS; 
terminal COMMA, DOT, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, IMPLICATION;

nonterminal Program Program;
nonterminal GlobalDeclList GlobalDeclList;
nonterminal GlobalDeclItem GlobalDeclItem;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ActualPars ActualPars;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclItem ConstDeclItem;
nonterminal VarDeclList VarDeclList;
nonterminal ActualParsList ActualParsList;
nonterminal IfBeg IfBeg;
nonterminal BegImpli BegImpli;
nonterminal MethodDecl MethodDecl;
nonterminal FormPars FormPars;
nonterminal LocalVarDeclList LocalVarDeclList;
nonterminal StatementListM StatementListM;
nonterminal ClassExt ClassExt;
nonterminal ClassMethDecl ClassMethDecl;
nonterminal Relop Relop;
nonterminal MethodDeclList MethodDeclList;
nonterminal FormalParamList FormalParamList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Assignop Assignop;
nonterminal ActualParam ActualParam;
nonterminal ElseBeg ElseBeg;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal NumConst NumConst;
nonterminal ClassVarDecl ClassVarDecl;
nonterminal ClassMethodDecl ClassMethodDecl;
nonterminal StatWhileBeg StatWhileBeg;
nonterminal EndIf EndIf;
nonterminal EmptyArr EmptyArr;
nonterminal DesignatorACall DesignatorACall;
nonterminal DesignatorArrayCallFu DesignatorArrayCallFu;
nonterminal DesignatorWithComma DesignatorWithComma;
nonterminal Label Label;
nonterminal DesignatorArrBeg DesignatorArrBeg;
nonterminal ExprStmtO ExprStmtO;
nonterminal ExprStmtM ExprStmtM;
nonterminal ConstStatement ConstStatement;
nonterminal StatementHN StatementHN;
nonterminal WhileBeg WhileBeg;
nonterminal ConPatching ConPatching;
nonterminal DesignatorArrEnd DesignatorArrEnd;

nonterminal rs.etf.pp1.symboltable.concepts.Obj NamePro, MethodReturnTypeIdent, VarDeclItem, FormalParamDecl, Designator, ClassDecl, ClassFirst;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ConstItemValue, Expr, Factor, Term, Condition, CondFact,CondFa, CondTerm,ConditionIF;

precedence left ELSE;

Program ::= (Program) PROGRAM NamePro:N1 GlobalDeclList:G2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(N1, G2, M3); RESULT.setLine(N1left); :};


NamePro ::= (NamePro) IDENT:namePro {: RESULT=new NamePro(namePro); RESULT.setLine(nameProleft); :};

GlobalDeclList ::= (GlobalDeclarationsList) GlobalDeclList:G1 GlobalDeclItem:G2 {: RESULT=new GlobalDeclarationsList(G1, G2); RESULT.setLine(G1left); :}
				 | 
				   (NoGlobalDeclarationsList) {: RESULT=new NoGlobalDeclarationsList(); :} /* epsilon */
				 ;

GlobalDeclItem ::= (GlobalConstDecl) ConstDecl:C1 {: RESULT=new GlobalConstDecl(C1); RESULT.setLine(C1left); :}
				 | 
                   (GlobalVarDecl) VarDecl:V1 {: RESULT=new GlobalVarDecl(V1); RESULT.setLine(V1left); :}
                 |
                   (GlobalClassDecl) ClassDecl:C1 {: RESULT=new GlobalClassDecl(C1); RESULT.setLine(C1left); :}
                 ;

ClassDecl ::= (ClassDeclaration) CLASS ClassFirst:C1 LBRACE ClassVarDecl:C2 ClassMethDecl:C3 RBRACE {: RESULT=new ClassDeclaration(C1, C2, C3); RESULT.setLine(C1left); :};

ClassFirst ::= (ClassFirst) IDENT:className ClassExt:C1 {: RESULT=new ClassFirst(className, C1); RESULT.setLine(classNameleft); :};

ClassExt ::= (ClassExtends) EXTENDS Type:T1 {: RESULT=new ClassExtends(T1); RESULT.setLine(T1left); :}
		   |
			 (NoClassExtends) {: RESULT=new NoClassExtends(); :} /* epsilon */
		   ;
			 
ClassVarDecl ::= (ClassVarDeclaration) ClassVarDecl:C1 VarDecl:V2 {: RESULT=new ClassVarDeclaration(C1, V2); RESULT.setLine(C1left); :}
			   | 
			   	 (NoClassVarDeclaration) {: RESULT=new NoClassVarDeclaration(); :} /* epsilon */
			   ;
			   	 
ClassMethDecl ::= (ClassMethDeclaration) LBRACE ClassMethodDecl:C1 RBRACE {: RESULT=new ClassMethDeclaration(C1); RESULT.setLine(C1left); :}
				|
				  (NoClassMethDeclaration) {: RESULT=new NoClassMethDeclaration(); :} /* epsilon */ 
				;

ClassMethodDecl ::= (ClassMethodDeclaration) ClassMethodDecl:C1 MethodDecl:M2 {: RESULT=new ClassMethodDeclaration(C1, M2); RESULT.setLine(C1left); :}
				  | 
				  	(NoClassMethodDeclaration) {: RESULT=new NoClassMethodDeclaration(); :} /* epsilon */
				  ;
MethodDeclList ::= (MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
			     |
			        (NoMethodDeclarationList) {: RESULT=new NoMethodDeclarationList(); :} /* epsilon */
			     ;
			  	  
MethodDecl ::= (MethodDeclaration) MethodReturnTypeIdent:M1 LPAREN FormPars:F2 RPAREN LocalVarDeclList:L3 LBRACE StatementListM:S4 RBRACE {: RESULT=new MethodDeclaration(M1, F2, L3, S4); RESULT.setLine(M1left); :};

StatementListM ::= (FullStatementListM) StatementListM:S1 Statement:S2 {: RESULT=new FullStatementListM(S1, S2); RESULT.setLine(S1left); :}
				|
				  (NoStatementListM) {: RESULT=new NoStatementListM(); :} /* epsilon */
				;

Statement ::= (AssignStmt) DesignatorStatement:D1 SEMI {: RESULT=new AssignStmt(D1); RESULT.setLine(D1left); :}
			|
			  (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			|
			  (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			|
			  (ReturnStmt) RETURN ExprStmtO:E1 SEMI {: RESULT=new ReturnStmt(E1); RESULT.setLine(E1left); :}
			|
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			|
			  (PrintStmt) PRINT LPAREN Expr:E1 ConstStatement:C2 RPAREN SEMI {: RESULT=new PrintStmt(E1, C2); RESULT.setLine(E1left); :}
			|
			  (OneMoreStmt) LBRACE StatementHN:S1 RBRACE {: RESULT=new OneMoreStmt(S1); RESULT.setLine(S1left); :}
			|
			  (WhileStmt) WhileBeg:W1 WHILE LPAREN Condition:C2 RPAREN StatWhileBeg:S3 Statement:S4 {: RESULT=new WhileStmt(W1, C2, S3, S4); RESULT.setLine(W1left); :}
			|
			  (ImplicationStmt) Designator:D1 DOT FOREACH LPAREN IDENT:condImpl IMPLICATION BegImpli:B2 Statement:S3 RPAREN SEMI {: RESULT=new ImplicationStmt(D1, condImpl, B2, S3); RESULT.setLine(D1left); :}
			|
			  (IfStmt) IfBeg:I1 IF LPAREN ConditionIF:C2 RPAREN Statement:S3 EndIf:E4 {: RESULT=new IfStmt(I1, C2, S3, E4); RESULT.setLine(I1left); :}
			|
			  (IfStmtElse) IfBeg:I1 IF LPAREN ConditionIF:C2 RPAREN Statement:S3 EndIf:E4 ELSE Statement:S5 ElseBeg:E6 {: RESULT=new IfStmtElse(I1, C2, S3, E4, S5, E6); RESULT.setLine(I1left); :}
			;
	
BegImpli ::= (BeginImplication) {: RESULT=new BeginImplication(); :} /* epsilon  */
		   ;

ElseBeg ::= (ElseBegin) {: RESULT=new ElseBegin(); :} /* epsilon */
		  ;

IfBeg ::= (IfBegin) {: RESULT=new IfBegin(); :} /* epsilon */
		;

EndIf ::= (EndIfEmpty) {: RESULT=new EndIfEmpty(); :} /* epsilon */
		; 

WhileBeg ::= (WhileEmpty) {: RESULT=new WhileEmpty(); :} /* epsilon  */
			;
			
StatWhileBeg ::= (StatWhileBeg) {: RESULT=new StatWhileBeg(); :} /* epsilon  */
			   ; 

ConditionIF ::= (ConditionIFStat) Condition:C1 {: RESULT=new ConditionIFStat(C1); RESULT.setLine(C1left); :}
			  |
              (ErrorInCondition) error:l
               {: parser.report_error("Izvrsen oporavak od greske u logickom izrazu unutar if naredbe. Greska je u liniji "+lleft, null); :} {: RESULT=new ErrorInCondition(); :}
			;

StatementHN ::= (StatementHNI) StatementHN:S1 Statement:S2 {: RESULT=new StatementHNI(S1, S2); RESULT.setLine(S1left); :}
			  | 
			  	(EmptySHNI) {: RESULT=new EmptySHNI(); :} /* epsilon */
			  ;

Condition ::= (ConditionOr) Condition:C1 OR ConPatching:C2 CondTerm:C3 {: RESULT=new ConditionOr(C1, C2, C3); RESULT.setLine(C1left); :} 
			| 
			  (ConditionTerm) CondTerm:C1 {: RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); :}
			;

ConPatching ::= (ConditionPatching) {: RESULT=new ConditionPatching(); :} /* epsilon */
			  ;
			  
CondTerm ::= (ConditionAnd) CondTerm:C1 AND CondFact:C2 {: RESULT=new ConditionAnd(C1, C2); RESULT.setLine(C1left); :}
		   |
		     (ConditionFact) CondFact:C1 {: RESULT=new ConditionFact(C1); RESULT.setLine(C1left); :}
		   ;
		   
CondFact ::= (ConFact) Expr:E1 CondFa:C2 {: RESULT=new ConFact(E1, C2); RESULT.setLine(E1left); :};
		   
CondFa ::= (CondFactorPart) Relop:R1 Expr:E2 {: RESULT=new CondFactorPart(R1, E2); RESULT.setLine(R1left); :}
	     |
	     	(NoCondFactorPart) {: RESULT=new NoCondFactorPart(); :} /* epsilon */
		 ;
		 
ConstStatement ::= (ConstantStatement) ConstStatement:C1 COMMA NUMBER:number {: RESULT=new ConstantStatement(C1, number); RESULT.setLine(C1left); :}
				 |
				 	(ConstStatementEmpty) {: RESULT=new ConstStatementEmpty(); :} /* epsilon */
				 ;

ExprStmtO ::= (ExprStmtMl) Expr:E1 {: RESULT=new ExprStmtMl(E1); RESULT.setLine(E1left); :}
			|
		   	 (ExprStmtLE) {: RESULT=new ExprStmtLE(); :} /* epsilon */
		   ;

DesignatorStatement ::= (DesignatorAssignValue) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssignValue(D1, A2, E3); RESULT.setLine(D1left); :} 
                      |
                        (DesignatorIncValue) Designator:D1 INC {: RESULT=new DesignatorIncValue(D1); RESULT.setLine(D1left); :} 
                      |
                        (DesignatorDecValue) Designator:D1 DEC {: RESULT=new DesignatorDecValue(D1); RESULT.setLine(D1left); :} 
                      |
                      	(DesignatorProcCall) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new DesignatorProcCall(D1, A2); RESULT.setLine(D1left); :}
					  |
					  	(DesignatorArrCall) DesignatorArrBeg:D1 LBRACK DesignatorACall:D2 RBRACK EQUALS Designator:D3 DesignatorArrEnd:D4 {: RESULT=new DesignatorArrCall(D1, D2, D3, D4); RESULT.setLine(D1left); :}
					  |
                        (ErrorInAssigningValue) error SEMI:l
                 		{: parser.report_error("Izvrsen oporavak od greske pri konstrukciji iskaza dodele do ;. Greska je u liniji "+lleft, null); :} {: RESULT=new ErrorInAssigningValue(); :} 
                      ;	

DesignatorArrBeg ::= (DesignatorArrBegin) {: RESULT=new DesignatorArrBegin(); :} /* epsilon */
				   ;

DesignatorArrEnd ::= (DesignatorArrEnd) {: RESULT=new DesignatorArrEnd(); :} /* epsilon */
				   ;
				   
DesignatorACall ::= (DesignatorArrayCallF) DesignatorArrayCallFu:D1 {: RESULT=new DesignatorArrayCallF(D1); RESULT.setLine(D1left); :}
				  |
				  	(DesignatorArrayCallE) {: RESULT=new DesignatorArrayCallE(); :} /* epsilon */
				  ;

DesignatorArrayCallFu ::= (DesignatorCallFuMul) DesignatorArrayCallFu:D1 DesignatorWithComma:D2 {: RESULT=new DesignatorCallFuMul(D1, D2); RESULT.setLine(D1left); :}
						| 
						  (DesignatorCallFuOne) Designator:D1 {: RESULT=new DesignatorCallFuOne(D1); RESULT.setLine(D1left); :}
						|
						  (DesignatorEmptyOne) EmptyArr:E1 DesignatorWithComma:D2 {: RESULT=new DesignatorEmptyOne(E1, D2); RESULT.setLine(E1left); :}
						; 

EmptyArr ::= (EmptyArrayDes) {: RESULT=new EmptyArrayDes(); :} /* epsilon */
			;

DesignatorWithComma ::= (DesignatorWComma) COMMA Designator:D1 {: RESULT=new DesignatorWComma(D1); RESULT.setLine(D1left); :}
					  |
					  	(DesignatorWCommaE) COMMA {: RESULT=new DesignatorWCommaE(); :}
					  ;
					
   
Designator ::= (ScalarDesignator) IDENT:name {: RESULT=new ScalarDesignator(name); RESULT.setLine(nameleft); :}
             |
               (ClassDesignator) Designator:D1 DOT IDENT:name {: RESULT=new ClassDesignator(D1, name); RESULT.setLine(D1left); :}
             |
               (ArrayDesignator) Designator:D1 LBRACK Expr:e RBRACK {: RESULT=new ArrayDesignator(D1, e); RESULT.setLine(D1left); :}
            ;

Label ::= (Labela) IDENT:lab {: RESULT=new Labela(lab); RESULT.setLine(lableft); :};

Relop ::= (EqualOperation) EQUAL {: RESULT=new EqualOperation(); :}
		|
		  (NotEqualOperation) NOTEQUAL {: RESULT=new NotEqualOperation(); :}
		|
		  (GreatOperation) GREAT {: RESULT=new GreatOperation(); :}
		|
		  (GreatEqualOperation) GREATEQUAL {: RESULT=new GreatEqualOperation(); :}
		|
		  (LessOperation) LESS {: RESULT=new LessOperation(); :}
		|
		  (LessEqualOperation) LESSEQUAL {: RESULT=new LessEqualOperation(); :}
		;

Assignop ::= (AssignOperation) EQUALS {: RESULT=new AssignOperation(); :};    

Expr ::= (ExprAdd) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprAdd(E1, A2, T3); RESULT.setLine(E1left); :}
	   |
         (ExprMTerm) MINUS Term:T1 {: RESULT=new ExprMTerm(T1); RESULT.setLine(T1left); :}
       |
         (ExprTerm) Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :}
       ;  
       
Addop ::= (PlusOperation) PLUS {: RESULT=new PlusOperation(); :}
        |
          (MinusOperation) MINUS {: RESULT=new MinusOperation(); :}
        ;

Term ::= (TermMul) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMul(T1, M2, F3); RESULT.setLine(T1left); :}
       |
         (TermFactor) Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :}
       ;	
      
Mulop ::= (MulOperation) MUL {: RESULT=new MulOperation(); :}
        |
          (DivOperation) DIV {: RESULT=new DivOperation(); :}
        |
          (RemOperation) REM {: RESULT=new RemOperation(); :}
        ;

Factor ::= (FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
         |
           (FactorFuncCall) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new FactorFuncCall(D1, A2); RESULT.setLine(D1left); :}
         |
           (FactorNumber) NUMBER:number {: RESULT=new FactorNumber(number); RESULT.setLine(numberleft); :}
         |
           (FactorChar) CHAR:character {: RESULT=new FactorChar(character); RESULT.setLine(characterleft); :}
         |
           (FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
         |
           (FactorBool) BOOL:bool {: RESULT=new FactorBool(bool); RESULT.setLine(boolleft); :}
         |
           (FactorArray) NEW Type:T1 LBRACK Expr:E2 RBRACK {: RESULT=new FactorArray(T1, E2); RESULT.setLine(T1left); :}  
         |
           (FactorParams) NEW Type:T1 LPAREN ActualPars:A2 RPAREN {: RESULT=new FactorParams(T1, A2); RESULT.setLine(T1left); :}
         ;
   
ActualPars ::= (YesActualPars) ActualParsList:A1 {: RESULT=new YesActualPars(A1); RESULT.setLine(A1left); :}
		     |
		       (NoActualPars) {: RESULT=new NoActualPars(); :} /* epsilon */		
		     ;		
		    
ActualParsList ::= (ManyActualParam) ActualParsList:A1 COMMA ActualParam:A2 {: RESULT=new ManyActualParam(A1, A2); RESULT.setLine(A1left); :}
				 |
				   (SingleActualParam) ActualParam:A1 {: RESULT=new SingleActualParam(A1); RESULT.setLine(A1left); :}
				 ;

ActualParam ::= (ActualParameter) Expr:E1 {: RESULT=new ActualParameter(E1); RESULT.setLine(E1left); :};	

MethodReturnTypeIdent ::= (MethodReturnType) Type:returnType IDENT:nameMeth {: RESULT=new MethodReturnType(returnType, nameMeth); RESULT.setLine(returnTypeleft); :}
				   		|  
				          (MethodReturnVoid) VOID IDENT:nameMeth {: RESULT=new MethodReturnVoid(nameMeth); RESULT.setLine(nameMethleft); :}
				        ;

LocalVarDeclList ::= (LocalVarDeclarationsList) LocalVarDeclList:L1 VarDecl:V2 {: RESULT=new LocalVarDeclarationsList(L1, V2); RESULT.setLine(L1left); :}
                   |
                     (NoLocalVarDeclarationsList) {: RESULT=new NoLocalVarDeclarationsList(); :} /* epsilon */
                   ;
	        
FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		   |
		     (NoFormParams) {: RESULT=new NoFormParams(); :} /* epsilon */		
		   ;		

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				  |
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				  ;

FormalParamDecl ::= (ScalarParam) Type:T1 IDENT:paramName {: RESULT=new ScalarParam(T1, paramName); RESULT.setLine(T1left); :} 
                  |
                    (ArrayParam) Type:T1 IDENT:paramName LBRACK RBRACK {: RESULT=new ArrayParam(T1, paramName); RESULT.setLine(T1left); :}
                  |
                	(ErrorInFormalParamDecl) error:l
                 	 {: parser.report_error("Izvrsen oporavak od greske u deklaraciji formalnog parametra do , ili ). Greska je u liniji "+lleft, null); :} {: RESULT=new ErrorInFormalParamDecl(); :}
                  ;

ConstDecl ::= (ConstDeclarations) CONST Type:T1 ConstDeclList:C2 SEMI {: RESULT=new ConstDeclarations(T1, C2); RESULT.setLine(T1left); :};


ConstDeclList ::= (ConstDeclarationsList) ConstDeclList:C1 COMMA ConstDeclItem:C2 {: RESULT=new ConstDeclarationsList(C1, C2); RESULT.setLine(C1left); :}
				| 
				  (OneConstDeclarationItem) ConstDeclItem:C1 {: RESULT=new OneConstDeclarationItem(C1); RESULT.setLine(C1left); :}
				;

ConstDeclItem ::= (ConstDeclarationItem) IDENT:constName EQUALS ConstItemValue:C1 {: RESULT=new ConstDeclarationItem(constName, C1); RESULT.setLine(constNameleft); :};

ConstItemValue ::= (ConstValueNumber) NUMBER:number {: RESULT=new ConstValueNumber(number); RESULT.setLine(numberleft); :}
                 |
                   (ConstValueChar) CHAR:character {: RESULT=new ConstValueChar(character); RESULT.setLine(characterleft); :}
                 |
                   (ConstValueBool) BOOL:bool {: RESULT=new ConstValueBool(bool); RESULT.setLine(boolleft); :}
                 ;

VarDecl ::= (VarDeclarations) Type:T1 VarDeclList:V2 SEMI {: RESULT=new VarDeclarations(T1, V2); RESULT.setLine(T1left); :};

VarDeclList ::= (VarDeclarationsList) VarDeclList:V1 COMMA VarDeclItem:V2 {: RESULT=new VarDeclarationsList(V1, V2); RESULT.setLine(V1left); :}
              | 
                (OneVarDeclarationItem) VarDeclItem:V1 {: RESULT=new OneVarDeclarationItem(V1); RESULT.setLine(V1left); :}
              ;

VarDeclItem ::= (VarDeclarationItem) IDENT:varName {: RESULT=new VarDeclarationItem(varName); RESULT.setLine(varNameleft); :}
              |
                (ArrayDeclarationItem) IDENT:arrName LBRACK RBRACK {: RESULT=new ArrayDeclarationItem(arrName); RESULT.setLine(arrNameleft); :}
              |
                (ErrorInDeclaringItem) error:l
                 {: parser.report_error("Izvrsen oporavak od greske u definiciji globalne promenljive do , ili ;. Greska je u liniji "+lleft, null); :} {: RESULT=new ErrorInDeclaringItem(); :} 
              ;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};   
